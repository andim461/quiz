{"version":3,"sources":["interfaces/Difficulty.ts","store/questionsStore.ts","store/statisticStore.ts","components/QustionCard.tsx","Api.ts","components/Statistic.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","questions","currentIndex","maxIndex","Infinity","currentAnswer","makeAutoObservable","this","incrementIndex","bind","max","answer","stats","easy","medium","hard","diff","useStyles","makeStyles","card","display","flexDirection","alignItems","boxShadow","cardHead","justifyContent","answers","QuestionCard","observer","classes","questionData","questionsStore","getCurrentQuestion","Card","className","variant","CardContent","Typography","color","gutterBottom","difficulty","component","dangerouslySetInnerHTML","__html","question","CardActions","map","index","correct_answer","Button","size","style","background","disabled","onClick","setAnswer","statisticStore","incrementDifficult","onAnswer","fetchQuestions","num","a","fetch","res","json","data","results","shuffle","incorrect_answers","getAllQuestions","NUMS_PER_DIFFICULTY","Object","values","diffsQuestions","push","minWidth","minHeight","title","marginBottom","Statistic","app","position","height","width","header","text","content","button","marginTop","App","useState","isLoading","setLoading","prepareQuestions","toInitial","setMaxIndex","setQuestions","useEffect","endIcon","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9ff7a77.chunk.js","sourcesContent":["enum Difficulty {\r\n  Easy = \"easy\",\r\n  Medium = \"medium\",\r\n  Hard = \"hard\",\r\n}\r\nexport default Difficulty;\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport QuestionAnswer from \"../interfaces/QuestionAnswer\";\r\nclass QuestionsStore {\r\n  questions: QuestionAnswer[] = [];\r\n  currentIndex = 0;\r\n  maxIndex = Infinity;\r\n  currentAnswer: string | null = null;\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    this.incrementIndex = this.incrementIndex.bind(this);\r\n  }\r\n  setQuestions(questions: QuestionAnswer[]) {\r\n    this.questions = questions;\r\n  }\r\n  incrementIndex() {\r\n    if (this.currentIndex !== this.maxIndex) {\r\n      this.currentIndex++;\r\n    }\r\n    this.currentAnswer = null;\r\n  }\r\n\r\n  setMaxIndex(max: number) {\r\n    this.maxIndex = max;\r\n  }\r\n  toInitial() {\r\n    this.questions = [];\r\n    this.currentIndex = 0;\r\n    this.maxIndex = Infinity;\r\n    this.currentAnswer = null;\r\n  }\r\n  setAnswer(answer: string) {\r\n    this.currentAnswer = answer;\r\n  }\r\n  getCurrentQuestion() {\r\n    return this.questions[this.currentIndex];\r\n  }\r\n}\r\nexport default new QuestionsStore();\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport Statistic from \"../interfaces/Statistics\";\r\nclass StatisticStore {\r\n  stats: Statistic = { easy: 0, medium: 0, hard: 0 };\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  incrementDifficult(diff: \"easy\" | \"medium\" | \"hard\") {\r\n    this.stats[diff]++;\r\n  }\r\n  toInitial() {\r\n    this.stats = { easy: 0, medium: 0, hard: 0 };\r\n  }\r\n}\r\nexport default new StatisticStore();\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport questionsStore from \"../store/questionsStore\";\r\nimport statisticStore from \"../store/statisticStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    boxShadow: \"4px 4px 4px 2px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  cardHead: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  answers: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\nconst QuestionCard = observer(() => {\r\n  const classes = useStyles();\r\n  const questionData = questionsStore.getCurrentQuestion();\r\n\r\n  const onAnswer = (answer: string) => {\r\n    questionsStore.setAnswer(answer);\r\n    if (questionsStore.questions) {\r\n      if (answer === questionData.correct_answer) {\r\n        statisticStore.incrementDifficult(questionData.difficulty);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.card} variant=\"outlined\">\r\n      <CardContent>\r\n        <div className={classes.cardHead}>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {questionsStore.currentIndex + 1}/15\r\n          </Typography>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {questionData.difficulty}\r\n          </Typography>\r\n        </div>\r\n        <Typography\r\n          variant=\"h5\"\r\n          component=\"h2\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: questionData.question,\r\n          }}\r\n        ></Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        {questionData.answers.map((answer, index) => {\r\n          let color = \"#FFF\";\r\n          if (questionsStore.currentAnswer) {\r\n            if (answer === questionData.correct_answer) {\r\n              color = \"rgba(0, 255, 0, 0.45)\";\r\n            } else if (questionsStore.currentAnswer === answer) {\r\n              color = \"rgba(255, 0, 0, 0.45)\";\r\n            }\r\n          }\r\n          return (\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              key={answer}\r\n              style={{ background: color, color: \"#000\" }}\r\n              disabled={!!questionsStore.currentAnswer}\r\n              onClick={() => {\r\n                onAnswer(answer);\r\n              }}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </Button>\r\n          );\r\n        })}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n});\r\nexport default QuestionCard;\r\n","import { shuffle } from \"lodash\";\nimport Question from \"./interfaces/Question\";\nimport Difficulty from \"./interfaces/Difficulty\";\nimport QuestionAnswer from \"./interfaces/QuestionAnswer\";\n\nexport const fetchQuestions = async (difficulty: Difficulty, num: number) => {\n  const res = await fetch(\n    `https://opentdb.com/api.php?amount=${num}&difficulty=${difficulty}`\n  );\n  const data = await res.json();\n  return data.results.map(\n    (question: Question): QuestionAnswer => ({\n      ...question,\n      answers: shuffle([\n        ...question.incorrect_answers,\n        question.correct_answer,\n      ]),\n    })\n  );\n};\nexport const getAllQuestions = async () => {\n  const NUMS_PER_DIFFICULTY = 5;\n  const questions = [];\n  for (const diff of Object.values(Difficulty)) {\n    const diffsQuestions = await fetchQuestions(diff, NUMS_PER_DIFFICULTY);\n    questions.push(...diffsQuestions);\n  }\n  return questions;\n};\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport statisticStore from \"../store/statisticStore\";\r\n\r\nconst useStyles = makeStyles({\r\n  stats: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n  },\r\n  diff: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  card: {\r\n    minWidth: 300,\r\n    minHeight: 150,\r\n    boxShadow: \"4px 4px 4px 2px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  title: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nconst Statistic = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.card} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} variant=\"h5\" component=\"h2\">\r\n          Your statistic:\r\n        </Typography>\r\n        <div className={classes.stats}>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Easy</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {statisticStore.stats.easy}/5\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Medium</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {statisticStore.stats.medium}/5\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Hard</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {statisticStore.stats.hard}/5\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n      <CardActions></CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowRightOutlinedIcon from \"@material-ui/icons/KeyboardArrowRightOutlined\";\nimport \"./App.css\";\nimport QuestionCard from \"./components/QustionCard\";\nimport { getAllQuestions } from \"./Api\";\nimport { useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport Statistic from \"./components/Statistic\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { observer } from \"mobx-react-lite\";\nimport statisticStore from \"./store/statisticStore\";\nimport questionsStore from \"./store/questionsStore\";\n\nconst useStyles = makeStyles({\n  app: {\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginBottom: 50,\n  },\n  text: {\n    color: \"white\",\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n\nconst App = observer(() => {\n  const classes = useStyles();\n  const NUMBER_OF_QUESTION = 15;\n  const [isLoading, setLoading] = useState<boolean>(true);\n\n  const prepareQuestions = async () => {\n    setLoading(true);\n    questionsStore.toInitial();\n    questionsStore.setMaxIndex(NUMBER_OF_QUESTION);\n    statisticStore.toInitial();\n    const questions = await getAllQuestions();\n    questionsStore.setQuestions(questions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    prepareQuestions();\n  }, []);\n\n  return (\n    <div className={classes.app}>\n      <div className={classes.header}>\n        <h1 className={classes.text}>Quiz!</h1>\n        <h2 className={classes.text}>You have 15 questions to answer.</h2>\n      </div>\n      <div className={classes.content}>\n        {questionsStore.currentIndex === NUMBER_OF_QUESTION ? (\n          <div className={classes.content}>\n            <Statistic />\n            <Button\n              className={classes.button}\n              variant=\"contained\"\n              color=\"primary\"\n              endIcon={<ReplayIcon />}\n              onClick={prepareQuestions}\n            >\n              Pass Again\n            </Button>\n          </div>\n        ) : isLoading || !questionsStore.questions ? (\n          <ReactLoading\n            type={\"spin\"}\n            color={\"#1565c0\"}\n            height={100}\n            width={100}\n          />\n        ) : (\n          <div className={classes.content}>\n            <QuestionCard />\n            {questionsStore.currentAnswer !== null ? (\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<KeyboardArrowRightOutlinedIcon />}\n                onClick={questionsStore.incrementIndex}\n              >\n                Next\n              </Button>\n            ) : null}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}