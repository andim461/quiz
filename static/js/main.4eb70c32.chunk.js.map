{"version":3,"sources":["Api.ts","components/QustionCard.tsx","components/Statistic.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","useStyles","makeStyles","card","display","flexDirection","alignItems","boxShadow","cardHead","justifyContent","answers","QuestionCard","props","classes","Card","className","variant","CardContent","Typography","color","gutterBottom","questionNum","questionInfo","difficulty","component","dangerouslySetInnerHTML","__html","question","CardActions","map","answer","index","correct_answer","Button","size","style","background","disabled","onClick","onAnswerCallback","onAnswer","fetchQuestions","num","a","fetch","res","json","data","results","shuffle","incorrect_answers","getAllQuestions","NUMS_PER_DIFFICULTY","questions","Object","values","diff","diffsQuestions","push","stats","minWidth","minHeight","title","marginBottom","Statistic","easy","medium","hard","app","position","height","width","header","text","content","button","marginTop","App","useState","setQuestionNum","isLoading","setLoading","setQuestions","isAnswered","setAnswered","answerState","setAnswer","statistics","setStatistics","prepareQuestions","useEffect","done","endIcon","type","currQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eb70c32.chunk.js","sourcesContent":["import { shuffle } from \"lodash\";\nexport enum Difficulty {\n  Easy = \"easy\",\n  Medium = \"medium\",\n  Hard = \"hard\",\n}\nexport interface Question {\n  category: string;\n  correct_answer: string;\n  difficulty: Difficulty;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n}\nexport interface QuestionAnswer extends Question {\n  answers: string[];\n}\nexport const fetchQuestions = async (difficulty: Difficulty, num: number) => {\n  const res = await fetch(\n    `https://opentdb.com/api.php?amount=${num}&difficulty=${difficulty}`\n  );\n  const data = await res.json();\n  return data.results.map(\n    (question: Question): QuestionAnswer => ({\n      ...question,\n      answers: shuffle([\n        ...question.incorrect_answers,\n        question.correct_answer,\n      ]),\n    })\n  );\n};\nexport const getAllQuestions = async () => {\n  const NUMS_PER_DIFFICULTY = 5;\n  const questions = [];\n  for (const diff of Object.values(Difficulty)) {\n    const diffsQuestions = await fetchQuestions(diff, NUMS_PER_DIFFICULTY);\n    questions.push(...diffsQuestions);\n  }\n  return questions;\n};\n","import React from \"react\";\r\nimport { QuestionAnswer } from \"../Api\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    boxShadow: \"4px 4px 4px 2px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  cardHead: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  answers: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\ninterface CardProps {\r\n  questionInfo: QuestionAnswer;\r\n  questionNum: number;\r\n  onAnswerCallback: (answer: string) => void;\r\n  answer: string | null;\r\n}\r\nconst QuestionCard = (props: CardProps) => {\r\n  const classes = useStyles();\r\n  const onAnswer = (answer: string) => {\r\n    props.onAnswerCallback(answer);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.card} variant=\"outlined\">\r\n      <CardContent>\r\n        <div className={classes.cardHead}>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {props.questionNum + 1}/15\r\n          </Typography>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {props.questionInfo.difficulty}\r\n          </Typography>\r\n        </div>\r\n        <Typography\r\n          variant=\"h5\"\r\n          component=\"h2\"\r\n          dangerouslySetInnerHTML={{ __html: props.questionInfo.question }}\r\n        ></Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        {props.questionInfo.answers.map((answer, index) => {\r\n          let color = \"#FFF\";\r\n          if (props.answer) {\r\n            if (answer === props.questionInfo.correct_answer) {\r\n              color = \"rgba(0, 255, 0, 0.45)\";\r\n            } else if (props.answer === answer) {\r\n              color = \"rgba(255, 0, 0, 0.45)\";\r\n            }\r\n          }\r\n          return (\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              key={answer}\r\n              style={{ background: color, color: \"#000\" }}\r\n              disabled={!!props.answer}\r\n              onClick={() => {\r\n                onAnswer(answer);\r\n              }}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </Button>\r\n          );\r\n        })}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\nexport default QuestionCard;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Statistics from \"../interfaces/Statistics\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\ninterface StatsProps {\r\n  stats: Statistics;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  stats: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n  },\r\n  diff: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  card: {\r\n    minWidth: 300,\r\n    minHeight: 150,\r\n    boxShadow: \"4px 4px 4px 2px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  title: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nconst Statistic = (props: StatsProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.card} variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography className={classes.title} variant=\"h5\" component=\"h2\">\r\n          Your statistic:\r\n        </Typography>\r\n        <div className={classes.stats}>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Easy</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {props.stats.easy}/5\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Medium</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {props.stats.medium}/5\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.diff}>\r\n            <Typography gutterBottom>Hard</Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {props.stats.hard}/5\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n      <CardActions></CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport KeyboardArrowRightOutlinedIcon from \"@material-ui/icons/KeyboardArrowRightOutlined\";\nimport \"./App.css\";\nimport QuestionCard from \"./components/QustionCard\";\nimport { getAllQuestions, QuestionAnswer } from \"./Api\";\nimport { useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport Statistic from \"./components/Statistic\";\nimport Statistics from \"./interfaces/Statistics\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n  app: {\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginBottom: 50,\n  },\n  text: {\n    color: \"white\",\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  const NUMBER_OF_QUESTION = 15;\n  const [questionNum, setQuestionNum] = useState<number>(0);\n  const [isLoading, setLoading] = useState<boolean>(true);\n  const [questions, setQuestions] = useState<QuestionAnswer[] | null>(null);\n  const [isAnswered, setAnswered] = useState<boolean>(false);\n  const [answerState, setAnswer] = useState<string | null>(null);\n  const [statistics, setStatistics] = useState<Statistics>({\n    easy: 0,\n    medium: 0,\n    hard: 0,\n  });\n\n  const prepareQuestions = async () => {\n    setLoading(true);\n    setQuestionNum(0);\n    setStatistics({\n      easy: 0,\n      medium: 0,\n      hard: 0,\n    });\n    const questions = await getAllQuestions();\n    setQuestions(questions);\n    setAnswered(false);\n    setLoading(false);\n  };\n\n  const incrementNum = () => {\n    if (questionNum !== NUMBER_OF_QUESTION) {\n      setQuestionNum(questionNum + 1);\n      setAnswered(false);\n      setAnswer(null);\n    }\n  };\n\n  const onReplay = () => {\n    prepareQuestions();\n  };\n\n  const onAnswer = (answer: string) => {\n    setAnswered(true);\n    setAnswer(answer);\n    if (questions) {\n      const currQuestion = questions[questionNum];\n      if (answer === currQuestion.correct_answer) {\n        const diff = currQuestion.difficulty;\n        const stats = { ...statistics, [diff]: statistics[diff] + 1 };\n        setStatistics(stats);\n      }\n    }\n  };\n\n  useEffect(() => {\n    prepareQuestions();\n  }, []);\n\n  const done = questionNum === 15;\n\n  return (\n    <div className={classes.app}>\n      <div className={classes.header}>\n        <h1 className={classes.text}>Quiz!</h1>\n        <h2 className={classes.text}>You have 15 questions to answer.</h2>\n      </div>\n      <div className={classes.content}>\n        {done ? (\n          <div className={classes.content}>\n            <Statistic stats={statistics} />\n            <Button\n              className={classes.button}\n              variant=\"contained\"\n              color=\"primary\"\n              endIcon={<ReplayIcon />}\n              onClick={onReplay}\n            >\n              Pass Again\n            </Button>\n          </div>\n        ) : isLoading || !questions ? (\n          <ReactLoading\n            type={\"spin\"}\n            color={\"#1565c0\"}\n            height={100}\n            width={100}\n          />\n        ) : (\n          <div className={classes.content}>\n            <QuestionCard\n              questionInfo={questions[questionNum]}\n              questionNum={questionNum}\n              onAnswerCallback={onAnswer}\n              answer={answerState}\n            />\n            {isAnswered ? (\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<KeyboardArrowRightOutlinedIcon />}\n                onClick={incrementNum}\n              >\n                Next\n              </Button>\n            ) : null}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}